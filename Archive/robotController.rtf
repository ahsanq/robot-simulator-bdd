{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <string.h>\
#include <math.h>\
\
// Define states for the state machine\
typedef enum \{\
    IDLE,\
    NAVIGATING,\
    AT_LOCATION\
\} RobotState;\
\
// Define robot status strings for output\
const char* status_strings[] = \{"Idle", "Navigating", "At Location"\};\
\
// Robot structure to hold state and position\
typedef struct \{\
    RobotState state;       // Current state\
    char command[20];       // Navigation command\
    float position[2];      // [x, y] coordinates\
    float target[2];        // Target bin B12 coordinates\
    char status[20];        // Robot status\
\} Robot;\
\
// Function to compute distance to target\
float distance_to_target(Robot* robot) \{\
    float dx = robot->target[0] - robot->position[0];\
    float dy = robot->target[1] - robot->position[1];\
    return sqrtf(dx * dx + dy * dy);\
\}\
\
int main() \{\
    // Initialize robot\
    Robot robot = \{\
        .state = IDLE,\
        .command = "",\
        .position = \{0.0f, 0.0f\},   // Start at origin\
        .target = \{5.0f, 3.0f\},     // Bin B12 at [5, 3]\
        .status = "Idle"\
    \};\
    \
    // Simulation parameters\
    const float distance_threshold = 0.1f; // Arrival threshold (meters)\
    const float move_step = 0.3f;         // Move distance per step\
    const int max_steps = 20;             // Simulation steps\
    int task_timer = 0;                   // Timer for At Location state\
    \
    // Simulate state machine\
    printf("Starting simulation...\\n");\
    for (int t = 1; t <= max_steps; t++) \{\
        switch (robot.state) \{\
            case IDLE:\
                // Given: Robot is powered on, map loaded\
                // When: Receive command at step 2\
                if (t == 2) \{\
                    strcpy(robot.command, "Navigate to B12");\
                    robot.state = NAVIGATING;\
                    strcpy(robot.status, "Navigating");\
                    printf("t=%d: Command '%s', transitioning to %s\\n", \
                           t, robot.command, status_strings[robot.state]);\
                \}\
                break;\
                \
            case NAVIGATING:\
                // Move toward B12\
                float dist = distance_to_target(&robot);\
                if (dist > distance_threshold) \{\
                    // Compute direction and move\
                    float dx = robot.target[0] - robot.position[0];\
                    float dy = robot.target[1] - robot.position[1];\
                    float move = fminf(move_step, dist); // Don't overshoot\
                    robot.position[0] += move * dx / dist;\
                    robot.position[1] += move * dy / dist;\
                    printf("t=%d: Moving to B12, position=[%.1f, %.1f]\\n", \
                           t, robot.position[0], robot.position[1]);\
                \} else \{\
                    // Then: Reached B12, update status\
                    robot.state = AT_LOCATION;\
                    strcpy(robot.status, "At Location");\
                    printf("t=%d: Reached B12, transitioning to %s\\n", \
                           t, status_strings[robot.state]);\
                    task_timer = 5; // Wait 5 steps before returning\
                \}\
                break;\
                \
            case AT_LOCATION:\
                // Then: Status updated, wait for task completion\
                if (--task_timer <= 0) \{\
                    robot.state = IDLE;\
                    strcpy(robot.status, "Idle");\
                    strcpy(robot.command, "");\
                    printf("t=%d: Task complete, transitioning to %s\\n", \
                           t, status_strings[robot.state]);\
                \}\
                break;\
        \}\
    \}\
    \
    // Final status\
    printf("Final position: [%.1f, %.1f], Status: %s\\n", \
           robot.position[0], robot.position[1], robot.status);\
    \
    return 0;\
\}}